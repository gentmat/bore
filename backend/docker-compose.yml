services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: bore-postgres
    environment:
      POSTGRES_DB: bore_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${DB_PASSWORD:-postgres}
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - bore-network

  # Redis for shared state (enables horizontal scaling)
  redis:
    image: redis:7-alpine
    container_name: bore-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    networks:
      - bore-network

  # Backend API Server
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: bore-backend
    ports:
      - "3000:3000"
    environment:
      # Database
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: bore_db
      DB_USER: postgres
      DB_PASSWORD: ${DB_PASSWORD:-postgres}
      
      # Server
      PORT: 3000
      JWT_SECRET: ${JWT_SECRET:-change-me-in-production}
      INTERNAL_API_KEY: ${INTERNAL_API_KEY:-d3f08e6d4c9a4f0fb7e5c2a1bd98f4ce}
      
      # Bore Server
      BORE_SERVER_HOST: ${BORE_SERVER_HOST:-127.0.0.1}
      BORE_SERVER_PORT: ${BORE_SERVER_PORT:-7835}
      
      # Redis for scaling
      REDIS_HOST: redis
      REDIS_PORT: 6379
      
      # Alerting (optional)
      SLACK_WEBHOOK_URL: ${SLACK_WEBHOOK_URL:-}
      SENDGRID_API_KEY: ${SENDGRID_API_KEY:-}
      ALERT_EMAIL_FROM: ${ALERT_EMAIL_FROM:-alerts@bore.com}
      ALERT_EMAIL_TO: ${ALERT_EMAIL_TO:-}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    networks:
      - bore-network

  # Bore Server (Rust tunnel server)
  # Controlled by ENABLE_MASTER_TUNNEL in .env
  # 
  # ENABLE_MASTER_TUNNEL=true  → bore-server starts automatically
  # ENABLE_MASTER_TUNNEL=false → bore-server won't start
  bore-server:
    build:
      context: ..
      dockerfile: bore-server/Dockerfile
    container_name: bore-server
    ports:
      - "7835:7835"
    environment:
      BACKEND_URL: http://backend:3000
      INTERNAL_API_KEY: ${INTERNAL_API_KEY:-d3f08e6d4c9a4f0fb7e5c2a1bd98f4ce}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      SERVER_ID: master_server
    depends_on:
      backend:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - bore-network
    profiles:
      - tunnel  # Controlled by COMPOSE_PROFILES in .env

  # Prometheus (optional - for metrics)
  prometheus:
    image: prom/prometheus:latest
    container_name: bore-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    depends_on:
      - backend
    restart: unless-stopped
    networks:
      - bore-network
    profiles:
      - monitoring

  # Grafana (optional - for dashboards)
  grafana:
    image: grafana/grafana:latest
    container_name: bore-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
      - GF_ANALYTICS_REPORTING_ENABLED=false
      - GF_SECURITY_ALLOW_EMBEDDING=true
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning:ro
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - bore-network
    profiles:
      - monitoring

volumes:
  postgres-data:
    driver: local
  redis-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local

networks:
  bore-network:
    driver: bridge
