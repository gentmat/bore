# Environment (development | production)
# CRITICAL: Set to 'production' in production environments
NODE_ENV=development

# Server Configuration
PORT=3000

# CRITICAL SECURITY: JWT Secret for token signing
# Production: REQUIRED - Generate with: openssl rand -base64 32
# Development: Optional (uses default for convenience)
JWT_SECRET=change-me-super-secret

# CRITICAL SECURITY: Internal API Key for bore-server communication
# Production: REQUIRED - Generate with: openssl rand -hex 32
# Development: Optional (defaults to null, allowing requests)
# MUST match the key configured in bore-server
INTERNAL_API_KEY=d3f08e6d4c9a4f0fb7e5c2a1bd98f4ce

# Bore Server Configuration
BORE_SERVER_HOST=127.0.0.1
BORE_SERVER_PORT=7835

# CORS Configuration (Security)
# Comma-separated list of allowed origins
# For local development: http://localhost:3000,http://127.0.0.1:3000
# For production: Add your actual domain(s)
ALLOWED_ORIGINS=http://localhost:3000,http://127.0.0.1:3000

# Master Server Tunnel (for testing vs production)
# true  = Run bore-server on master (good for testing, single machine setup)
# false = Don't run bore-server on master (production, use separate VPS)
ENABLE_MASTER_TUNNEL=true

# Docker Compose Profiles (auto-configured based on ENABLE_MASTER_TUNNEL)
# When ENABLE_MASTER_TUNNEL=true, set COMPOSE_PROFILES=tunnel
# When ENABLE_MASTER_TUNNEL=false, leave empty or comment out
COMPOSE_PROFILES=tunnel

# Database Configuration (PostgreSQL)
DB_HOST=localhost
DB_PORT=5432
DB_NAME=bore_db
DB_USER=postgres
DB_PASSWORD=postgres

# Redis Configuration (Optional - Required for horizontal scaling)
# Enable Redis for distributed state sharing across multiple backend instances
# Single instance deployment: Set to false
# Multi-instance deployment: Set to true and configure Redis server
REDIS_ENABLED=false
REDIS_HOST=localhost
REDIS_PORT=6379

# Capacity Management Configuration
# Adjust these based on your hardware and expected load
# These control system-wide capacity limits and resource allocation

# Maximum concurrent tunnels per bore-server instance
MAX_TUNNELS_PER_SERVER=100

# Maximum bandwidth per tunnel in Mbps (prevents one user from hogging bandwidth)
MAX_BANDWIDTH_PER_TUNNEL=100

# Total system capacity across all servers
# Start conservative, increase as you scale
# Example: 2 servers * 100 tunnels/server = 200
TOTAL_SYSTEM_CAPACITY=100

# Reserved capacity for existing users (percentage)
# Example: 20 = reserve 20% capacity for existing users
RESERVED_CAPACITY_PERCENT=20

# Alerting Configuration (Optional - Leave empty for now!)
# These are NOT required. Only setup if you want notifications on your phone/email.
# For testing/learning: Leave empty and just check the dashboard.

# Slack webhook URL for alerts (optional)
# Get from: https://api.slack.com/messaging/webhooks
SLACK_WEBHOOK_URL=

# SendGrid API key for email alerts (optional)
# Get from: https://sendgrid.com
SENDGRID_API_KEY=
ALERT_EMAIL_FROM=
ALERT_EMAIL_TO=

# Admin Configuration (Optional - for production deployments)
# Set these to automatically create an admin user on server startup
# ADMIN_EMAIL=admin@example.com
# ADMIN_PASSWORD=secure_admin_password
# ADMIN_NAME="Admin User" (optional, defaults to "Admin User")
# ADMIN_AUTO_CREATE=true (optional, set to true to auto-create admin on startup)
