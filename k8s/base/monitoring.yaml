---
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-config
  namespace: bore-system
  labels:
    app.kubernetes.io/name: bore
    app.kubernetes.io/component: monitoring
data:
  prometheus.yml: |
    global:
      scrape_interval: 15s
      evaluation_interval: 15s
      external_labels:
        cluster: 'bore-k8s'
        replica: 'prometheus-1'

    rule_files:
      - "/etc/prometheus/rules/*.yml"

    scrape_configs:
      - job_name: 'bore-backend'
        kubernetes_sd_configs:
          - role: pod
            namespaces:
              names:
                - bore-system
        relabel_configs:
          - source_labels: [__meta_kubernetes_pod_label_app_kubernetes_io_component]
            action: keep
            regex: backend
          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
            action: keep
            regex: true
          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
            action: replace
            target_label: __metrics_path__
            regex: (.+)
          - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
            action: replace
            regex: ([^:]+)(?::\d+)?;(\d+)
            replacement: $1:$2
            target_label: __address__
          - action: labelmap
            regex: __meta_kubernetes_pod_label_(.+)
          - source_labels: [__meta_kubernetes_namespace]
            action: replace
            target_label: kubernetes_namespace
          - source_labels: [__meta_kubernetes_pod_name]
            action: replace
            target_label: kubernetes_pod_name

      - job_name: 'kubernetes-apiservers'
        kubernetes_sd_configs:
          - role: endpoints
        scheme: https
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        relabel_configs:
          - source_labels: [__meta_kubernetes_namespace, __meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]
            action: keep
            regex: default;kubernetes;https

      - job_name: 'kubernetes-nodes'
        kubernetes_sd_configs:
          - role: node
        scheme: https
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        relabel_configs:
          - action: labelmap
            regex: __meta_kubernetes_node_label_(.+)

      - job_name: 'kubernetes-pods'
        kubernetes_sd_configs:
          - role: pod
        relabel_configs:
          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
            action: keep
            regex: true
          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
            action: replace
            target_label: __metrics_path__
            regex: (.+)
          - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
            action: replace
            regex: ([^:]+)(?::\d+)?;(\d+)
            replacement: $1:$2
            target_label: __address__
          - action: labelmap
            regex: __meta_kubernetes_pod_label_(.+)
          - source_labels: [__meta_kubernetes_namespace]
            action: replace
            target_label: kubernetes_namespace
          - source_labels: [__meta_kubernetes_pod_name]
            action: replace
            target_label: kubernetes_pod_name

  alerting.yml: |
    global:
      smtp_smarthost: 'localhost:587'
      smtp_from: 'alerts@bore.local'

    route:
      group_by: ['alertname']
      group_wait: 10s
      group_interval: 10s
      repeat_interval: 1h
      receiver: 'web.hook'

    receivers:
      - name: 'web.hook'
        webhook_configs:
          - url: 'http://bore-backend-service:3000/alerts'

    inhibit_rules:
      - source_match:
          severity: 'critical'
        target_match:
          severity: 'warning'
        equal: ['alertname', 'dev', 'instance']

  bore-alerts.yml: |
    groups:
      - name: bore.rules
        rules:
          - alert: BoreBackendDown
            expr: up{job="bore-backend"} == 0
            for: 1m
            labels:
              severity: critical
            annotations:
              summary: "Bore backend is down"
              description: "Bore backend has been down for more than 1 minute."

          - alert: HighResponseTime
            expr: bore_api_response_time_seconds{quantile="0.95"} > 0.5
            for: 5m
            labels:
              severity: warning
            annotations:
              summary: "High API response time detected"
              description: "95th percentile response time is {{ $value }}s"

          - alert: HighErrorRate
            expr: rate(bore_api_requests_total{status=~"5.."}[5m]) / rate(bore_api_requests_total[5m]) > 0.1
            for: 5m
            labels:
              severity: warning
            annotations:
              summary: "High error rate detected"
              description: "Error rate is {{ $value | humanizePercentage }}"

          - alert: TooManyConnections
            expr: bore_active_tunnels > 500
            for: 10m
            labels:
              severity: warning
            annotations:
              summary: "Too many active tunnels"
              description: "{{ $value }} active tunnels detected"

          - alert: DatabaseConnectionFailure
            expr: up{job="postgres"} == 0
            for: 1m
            labels:
              severity: critical
            annotations:
              summary: "Database connection failure"
              description: "Cannot connect to PostgreSQL database"

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus
  namespace: bore-system
  labels:
    app.kubernetes.io/name: bore
    app.kubernetes.io/component: prometheus
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: bore
      app.kubernetes.io/component: prometheus
  template:
    metadata:
      labels:
        app.kubernetes.io/name: bore
        app.kubernetes.io/component: prometheus
    spec:
      serviceAccountName: prometheus
      containers:
      - name: prometheus
        image: prom/prometheus:latest
        imagePullPolicy: IfNotPresent
        args:
          - '--config.file=/etc/prometheus/prometheus.yml'
          - '--storage.tsdb.path=/prometheus/'
          - '--web.console.libraries=/etc/prometheus/console_libraries'
          - '--web.console.templates=/etc/prometheus/consoles'
          - '--storage.tsdb.retention.time=15d'
          - '--web.enable-lifecycle'
        ports:
        - containerPort: 9090
          name: http
        volumeMounts:
        - name: prometheus-config-volume
          mountPath: /etc/prometheus/
        - name: prometheus-storage-volume
          mountPath: /prometheus/
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "4Gi"
            cpu: "2000m"
        livenessProbe:
          httpGet:
            path: /-/healthy
            port: 9090
          initialDelaySeconds: 45
          periodSeconds: 15
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /-/ready
            port: 9090
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
      volumes:
      - name: prometheus-config-volume
        configMap:
          name: prometheus-config
      - name: prometheus-storage-volume
        persistentVolumeClaim:
          claimName: prometheus-pvc
      securityContext:
        runAsNonRoot: true
        runAsUser: 65534
        fsGroup: 65534

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: prometheus-pvc
  namespace: bore-system
  labels:
    app.kubernetes.io/name: bore
    app.kubernetes.io/component: prometheus
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 20Gi
  storageClassName: fast-ssd

---
apiVersion: v1
kind: Service
metadata:
  name: prometheus-service
  namespace: bore-system
  labels:
    app.kubernetes.io/name: bore
    app.kubernetes.io/component: prometheus
spec:
  type: ClusterIP
  ports:
  - port: 9090
    targetPort: 9090
    protocol: TCP
    name: http
  selector:
    app.kubernetes.io/name: bore
    app.kubernetes.io/component: prometheus

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: prometheus
  namespace: bore-system
  labels:
    app.kubernetes.io/name: bore
    app.kubernetes.io/component: prometheus

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: prometheus
  labels:
    app.kubernetes.io/name: bore
    app.kubernetes.io/component: prometheus
rules:
- apiGroups: [""]
  resources:
  - nodes
  - nodes/metrics
  - services
  - endpoints
  - pods
  verbs: ["get", "list", "watch"]
- apiGroups: ["extensions"]
  resources:
  - ingresses
  verbs: ["get", "list", "watch"]
- nonResourceURLs: ["/metrics"]
  verbs: ["get"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: prometheus
  labels:
    app.kubernetes.io/name: bore
    app.kubernetes.io/component: prometheus
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: prometheus
subjects:
- kind: ServiceAccount
  name: prometheus
  namespace: bore-system

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-config
  namespace: bore-system
  labels:
    app.kubernetes.io/name: bore
    app.kubernetes.io/component: grafana
data:
  grafana.ini: |
    [server]
    root_url = http://localhost:3001/

    [security]
    admin_user = admin
    admin_password = ${GRAFANA_PASSWORD}

    [auth.anonymous]
    enabled = false

    [database]
    type = sqlite3
    path = /var/lib/grafana/grafana.db

    [users]
    allow_sign_up = false

    [log]
    level = info

    [metrics]
    enabled = true

  datasources.yml: |
    apiVersion: 1
    datasources:
      - name: Prometheus
        type: prometheus
        access: proxy
        url: http://prometheus-service:9090
        isDefault: true
        editable: true
        jsonData:
          timeInterval: "15s"
          queryTimeout: "60s"
          httpMethod: "POST"

  dashboards.yml: |
    apiVersion: 1
    providers:
      - name: 'default'
        orgId: 1
        folder: ''
        type: file
        disableDeletion: false
        updateIntervalSeconds: 10
        allowUiUpdates: true
        options:
          path: /etc/grafana/provisioning/dashboards

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: bore-system
  labels:
    app.kubernetes.io/name: bore
    app.kubernetes.io/component: grafana
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: bore
      app.kubernetes.io/component: grafana
  template:
    metadata:
      labels:
        app.kubernetes.io/name: bore
        app.kubernetes.io/component: grafana
    spec:
      containers:
      - name: grafana
        image: grafana/grafana:latest
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 3000
          name: http
        env:
        - name: GF_SECURITY_ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              name: bore-secrets
              key: GRAFANA_PASSWORD
        - name: GF_PATHS_PROVISIONING
          value: /etc/grafana/provisioning
        - name: GF_ANALYTICS_REPORTING_ENABLED
          value: "false"
        - name: GF_SECURITY_ALLOW_EMBEDDING
          value: "true"
        volumeMounts:
        - name: grafana-config-volume
          mountPath: /etc/grafana/provisioning
        - name: grafana-storage-volume
          mountPath: /var/lib/grafana
        - name: grafana-dashboards-volume
          mountPath: /etc/grafana/provisioning/dashboards
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /api/health
            port: 3000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /api/health
            port: 3000
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
      volumes:
      - name: grafana-config-volume
        configMap:
          name: grafana-config
      - name: grafana-storage-volume
        persistentVolumeClaim:
          claimName: grafana-pvc
      - name: grafana-dashboards-volume
        configMap:
          name: grafana-dashboards
      securityContext:
        runAsNonRoot: true
        runAsUser: 472
        fsGroup: 472

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: grafana-pvc
  namespace: bore-system
  labels:
    app.kubernetes.io/name: bore
    app.kubernetes.io/component: grafana
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
  storageClassName: fast-ssd

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-dashboards
  namespace: bore-system
  labels:
    app.kubernetes.io/name: bore
    app.kubernetes.io/component: grafana
data:
  bore-overview.json: |
    {
      "id": null,
      "title": "Bore Overview",
      "tags": ["bore", "overview"],
      "timezone": "browser",
      "panels": [
        {
          "title": "Active Tunnels",
          "type": "stat",
          "targets": [
            {
              "expr": "bore_active_tunnels",
              "refId": "A"
            }
          ]
        }
      ],
      "time": {
        "from": "now-1h",
        "to": "now"
      },
      "refresh": "15s"
    }

---
apiVersion: v1
kind: Service
metadata:
  name: grafana-service
  namespace: bore-system
  labels:
    app.kubernetes.io/name: bore
    app.kubernetes.io/component: grafana
spec:
  type: LoadBalancer
  ports:
  - port: 3000
    targetPort: 3000
    protocol: TCP
    name: http
  selector:
    app.kubernetes.io/name: bore
    app.kubernetes.io/component: grafana