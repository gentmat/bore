{
	"info": {
		"_postman_id": "bore-api-collection",
		"name": "Bore API",
		"description": "Complete API collection for Bore TCP tunneling solution",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "bore-api"
	},
	"item": [
		{
			"name": "Authentication",
			"item": [
				{
					"name": "Register User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201 or 409\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([201, 409]);",
									"});",
									"",
									"if (pm.response.code === 201) {",
									"    const response = pm.response.json();",
									"    pm.globals.set(\"user_id\", response.id);",
									"    pm.globals.set(\"api_key\", response.api_key);",
									"    pm.test(\"User registered successfully\", function () {",
									"        pm.expect(response.id).to.be.a(\"string\");",
									"        pm.expect(response.api_key).to.be.a(\"string\");",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"testuser@example.com\",\n  \"password\": \"TestPassword123!\",\n  \"name\": \"Test User\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/auth/register",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"const response = pm.response.json();",
									"pm.globals.set(\"jwt_token\", response.token);",
									"pm.globals.set(\"user_id\", response.user.id);",
									"pm.globals.set(\"api_key\", response.user.api_key);",
									"",
									"pm.test(\"Login successful\", function () {",
									"    pm.expect(response.token).to.be.a(\"string\");",
									"    pm.expect(response.user).to.be.an(\"object\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"testuser@example.com\",\n  \"password\": \"TestPassword123!\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/auth/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Current User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"const response = pm.response.json();",
									"pm.test(\"User data retrieved\", function () {",
									"    pm.expect(response.id).to.be.a(\"string\");",
									"    pm.expect(response.email).to.be.a(\"string\");",
									"    pm.expect(response.api_key).to.be.a(\"string\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_token}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1/auth/me",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"me"
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_token}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1/auth/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"logout"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Instances",
			"item": [
				{
					"name": "List Instances",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"const response = pm.response.json();",
									"pm.test(\"Instances array exists\", function () {",
									"    pm.expect(response.instances).to.be.an(\"array\");",
									"    pm.expect(response.pagination).to.be.an(\"object\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_token}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1/instances",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"instances"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Instance",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.expect(pm.response.code).to.equal(201);",
									"});",
									"",
									"const response = pm.response.json();",
									"pm.globals.set(\"instance_id\", response.id);",
									"pm.globals.set(\"remote_port\", response.remote_port);",
									"",
									"pm.test(\"Instance created successfully\", function () {",
									"    pm.expect(response.id).to.be.a(\"string\");",
									"    pm.expect(response.remote_port).to.be.a(\"number\");",
									"    pm.expect(response.connection_string).to.be.a(\"string\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Test Tunnel\",\n  \"local_port\": 8080,\n  \"region\": \"us-east\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/instances",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"instances"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Instance",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"const response = pm.response.json();",
									"pm.test(\"Instance details retrieved\", function () {",
									"    pm.expect(response.id).to.equal(pm.globals.get(\"instance_id\"));",
									"    pm.expect(response.stats).to.be.an(\"object\");",
									"    pm.expect(response.server_info).to.be.an(\"object\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_token}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1/instances/{{instance_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"instances",
								"{{instance_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Instance",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"const response = pm.response.json();",
									"pm.test(\"Instance updated successfully\", function () {",
									"    pm.expect(response.id).to.equal(pm.globals.get(\"instance_id\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Updated Test Tunnel\",\n  \"max_connections\": 150\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/instances/{{instance_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"instances",
								"{{instance_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Instance",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.expect(pm.response.code).to.equal(204);",
									"});",
									"",
									"pm.globals.unset(\"instance_id\");",
									"pm.globals.unset(\"remote_port\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_token}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1/instances/{{instance_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"instances",
								"{{instance_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Instance Logs",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_token}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1/instances/{{instance_id}}/logs?limit=50&level=info",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"instances",
								"{{instance_id}}",
								"logs"
							],
							"query": [
								{
									"key": "limit",
									"value": "50"
								},
								{
									"key": "level",
									"value": "info"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Servers",
			"item": [
				{
					"name": "List Servers",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"const response = pm.response.json();",
									"pm.test(\"Servers array exists\", function () {",
									"    pm.expect(response.servers).to.be.an(\"array\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_token}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1/servers",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"servers"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Server",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_token}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1/servers/{{server_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"servers",
								"{{server_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Metrics",
			"item": [
				{
					"name": "Get System Metrics",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"const response = pm.response.json();",
									"pm.test(\"System metrics retrieved\", function () {",
									"    pm.expect(response.tunnels).to.be.an(\"object\");",
									"    pm.expect(response.servers).to.be.an(\"object\");",
									"    pm.expect(response.users).to.be.an(\"object\");",
									"    pm.expect(response.performance).to.be.an(\"object\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_token}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1/metrics/system",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"metrics",
								"system"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get User Metrics",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_token}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1/metrics/user",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"metrics",
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "Prometheus Metrics",
					"request": {
						"method": "GET",
						"url": {
							"raw": "{{baseUrl}}/metrics",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"metrics"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Auto-refresh token if it's expired",
					"if (pm.globals.get(\"jwt_token\")) {",
					"    // You could add token refresh logic here",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Global error handling",
					"if (pm.response.code >= 400) {",
					"    pm.test(\"Error response format\", function () {",
					"        const response = pm.response.json();",
					"        pm.expect(response.error).to.be.an(\"object\");",
					"        pm.expect(response.error.code).to.be.a(\"string\");",
					"        pm.expect(response.error.message).to.be.a(\"string\");",
					"    });",
					"}"
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:3000",
			"type": "string"
		}
	]
}