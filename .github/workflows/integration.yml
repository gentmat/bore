name: Integration Tests

on:
  push:
    branches:
      - main
  pull_request:
  schedule:
    # Run integration tests daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:

jobs:
  integration:
    name: Full Stack Integration Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_DB: bore_test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Install backend dependencies
        working-directory: backend
        run: npm ci

      - name: Build Rust components
        run: |
          cargo build --release -p bore-server
          cargo build --release -p bore-client

      - name: Setup database
        working-directory: backend
        env:
          DB_HOST: localhost
          DB_PORT: 5432
          DB_NAME: bore_test
          DB_USER: postgres
          DB_PASSWORD: postgres
          NODE_ENV: test
        run: npm run migrate:up

      - name: Start backend server
        working-directory: backend
        env:
          DB_HOST: localhost
          DB_PORT: 5432
          DB_NAME: bore_test
          DB_USER: postgres
          DB_PASSWORD: postgres
          REDIS_HOST: localhost
          REDIS_PORT: 6379
          REDIS_ENABLED: true
          JWT_SECRET: test-secret-integration
          INTERNAL_API_KEY: test-internal-key-integration
          NODE_ENV: test
          PORT: 3000
        run: |
          npm start &
          echo $! > backend.pid
          # Wait for backend to be ready
          timeout 30 bash -c 'until curl -f http://localhost:3000/health; do sleep 2; done'

      - name: Start bore-server
        env:
          BORE_BACKEND_URL: http://localhost:3000
          BORE_BACKEND_API_KEY: test-internal-key-integration
          BORE_MIN_PORT: 10000
          BORE_MAX_PORT: 11000
        run: |
          ./target/release/bore-server \
            --backend-url $BORE_BACKEND_URL \
            --backend-api-key $BORE_BACKEND_API_KEY \
            --min-port $BORE_MIN_PORT \
            --max-port $BORE_MAX_PORT \
            --bind-addr 127.0.0.1 \
            &
          echo $! > bore-server.pid
          sleep 3

      - name: Run integration tests (Rust)
        env:
          BACKEND_URL: http://localhost:3000
          RUST_LOG: info
        run: cargo test --test integration_test -- --test-threads=1

      - name: Run WebSocket tests (Backend)
        working-directory: backend
        env:
          BACKEND_URL: http://localhost:3000
          DB_HOST: localhost
          DB_PORT: 5432
          DB_NAME: bore_test
          DB_USER: postgres
          DB_PASSWORD: postgres
          REDIS_HOST: localhost
          REDIS_PORT: 6379
          REDIS_ENABLED: true
          JWT_SECRET: test-secret-integration
          NODE_ENV: test
        run: npm test -- websocket.test.ts

      - name: Test end-to-end tunnel creation
        env:
          BACKEND_URL: http://localhost:3000
        run: |
          # Register test user
          REGISTER_RESPONSE=$(curl -s -X POST http://localhost:3000/api/v1/auth/register \
            -H "Content-Type: application/json" \
            -d '{"email":"e2e-test@example.com","password":"TestPass123!","name":"E2E Test"}')
          
          echo "Register response: $REGISTER_RESPONSE"
          
          # Login
          LOGIN_RESPONSE=$(curl -s -X POST http://localhost:3000/api/v1/auth/login \
            -H "Content-Type: application/json" \
            -d '{"email":"e2e-test@example.com","password":"TestPass123!"}')
          
          echo "Login response: $LOGIN_RESPONSE"
          
          TOKEN=$(echo $LOGIN_RESPONSE | jq -r '.token')
          echo "Token: ${TOKEN:0:20}..."
          
          # Create instance
          INSTANCE_RESPONSE=$(curl -s -X POST http://localhost:3000/api/v1/instances \
            -H "Authorization: Bearer $TOKEN" \
            -H "Content-Type: application/json" \
            -d '{"name":"e2e-test-instance","local_port":8080,"region":"us-east"}')
          
          echo "Instance response: $INSTANCE_RESPONSE"
          
          INSTANCE_ID=$(echo $INSTANCE_RESPONSE | jq -r '.id')
          echo "Created instance: $INSTANCE_ID"
          
          # Verify instance was created
          if [ "$INSTANCE_ID" != "null" ] && [ -n "$INSTANCE_ID" ]; then
            echo "✓ E2E test passed: Instance created successfully"
          else
            echo "✗ E2E test failed: Could not create instance"
            exit 1
          fi

      - name: Collect logs on failure
        if: failure()
        run: |
          echo "=== Backend Logs ==="
          cat backend/*.log 2>/dev/null || echo "No backend logs"
          
          echo "=== Bore Server Logs ==="
          if [ -f bore-server.pid ]; then
            kill -0 $(cat bore-server.pid) 2>/dev/null && echo "bore-server is running" || echo "bore-server is not running"
          fi
          
          echo "=== Database Status ==="
          psql -h localhost -U postgres -d bore_test -c "SELECT * FROM users LIMIT 5;" || echo "Cannot connect to database"
          
          echo "=== Redis Status ==="
          redis-cli -h localhost ping || echo "Cannot connect to Redis"

      - name: Cleanup
        if: always()
        run: |
          # Stop backend
          if [ -f backend.pid ]; then
            kill $(cat backend.pid) 2>/dev/null || true
          fi
          
          # Stop bore-server
          if [ -f bore-server.pid ]; then
            kill $(cat bore-server.pid) 2>/dev/null || true
          fi
          
          # Clean up test data
          psql -h localhost -U postgres -d bore_test -c "TRUNCATE users, instances CASCADE;" || true

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: integration-test-results
          path: |
            backend/coverage/
            target/debug/
          retention-days: 7
